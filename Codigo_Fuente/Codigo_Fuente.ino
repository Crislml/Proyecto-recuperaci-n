
 //----------------------------------------------
 //
 //        Sketch Generated by Visuino
 //              www.visuino.com
 //          Version 7.8.3.60
 //
 //----------------------------------------------

#define VISUINO_ARDUINO_UNO

#include <OpenWire.h>
#include <Mitov.h>
#include <Mitov_LiquidCrystalDisplay.h>
#include <Mitov_Snapshot.h>
#include <Mitov_BinaryGenerators.h>

// Shared Component Member Variables

namespace ComponentVariables
{
class
{
public:
  uint32_t Value1 : 5;
  uint32_t Value2 : 2;
  bool Value3 : 1;
  bool Value4 : 1;
  bool Value5 : 1;

} BitFields;

class Variable1
{
public:
  inline static uint32_t GetValue() { return BitFields.Value1; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value1 = AValue; }

};
class Variable2
{
public:
  inline static uint32_t GetValue() { return BitFields.Value2; }
  inline static void SetValue( uint32_t AValue ) { BitFields.Value2 = AValue; }

};
class Variable3
{
public:
  inline static bool GetValue() { return BitFields.Value3; }
  inline static void SetValue( bool AValue ) { BitFields.Value3 = AValue; }

};
class Variable4
{
public:
  inline static bool GetValue() { return BitFields.Value4; }
  inline static void SetValue( bool AValue ) { BitFields.Value4 = AValue; }

};
class Variable5
{
public:
  inline static bool GetValue() { return BitFields.Value5; }
  inline static void SetValue( bool AValue ) { BitFields.Value5 = AValue; }

};
} // ComponentVariables

// Arduino Constant Declarations

namespace VisuinoConstants
{
class FloatValue1
{
public:
    inline static constexpr float GetValue() { return 0; }
};

class FloatValue0
{
public:
    inline static constexpr float GetValue() { return 1; }
};

class TextValue0
{
public:
    inline static constexpr const char *GetValue() { return "www.visuino.com"; }
};

class TextValue1
{
public:
    inline static constexpr const char *GetValue() { return "Temp:"; }
};

class TextValue2
{
public:
    inline static constexpr const char *GetValue() { return ""; }
};

} // VisuinoConstants

// Pin Call Declarations

namespace PinCalls
{
class PinCallerReceive0
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive1
{
public:
  void Notify( void *_Data );

};
class PinCallerReceive2
{
public:
  void Notify( void *_Data );

};
} // PinCalls

// Arduino Board Declarations

namespace BoardDeclarations
{
Mitov::ArduinoAnalogInputChannel<0, Mitov::AnalogPin_EmbeddedPinImplementation<1, ::PinCalls::PinCallerReceive0 >> ArduinoAnalogInputChannel_0;

} // BoardDeclarations

// Declarations

namespace Declarations
{
Mitov::LiquidCrystalDisplay<
  Mitov::LiquidCrystalDisplayParallel<
  Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<4 >, Mitov::DigitalPin_DirectBoardPinImplementation<5 >, Mitov::DigitalPin_DirectBoardPinImplementation<6 >, Mitov::DigitalPin_DirectBoardPinImplementation<7 >>, // 1_PINS
  Mitov::DigitalPin_DirectBoardPinImplementation<8 >, // 1_PINS_0
  Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
  Mitov::DigitalPin_DirectBoardPinImplementation<9 >, // 1_PINS_2
  Mitov::ConstantProperty<21, bool, false >, // AutoScroll
  Mitov::ConstantProperty<24, bool, false >, // Blink
  Mitov::ConstantProperty<20, bool, true >, // Enabled
  Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
  Mitov::ConstantProperty<22, bool, false >, // RightToLeft
  Mitov::ConstantProperty<23, bool, false > // ShowCursor
  >, // 0_TYPE
  16, // Columns
  Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable2>, // FCursorLine
  Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable1>, // FCursorPos
  2 // Rows
   > _o_LiquidCrystalDisplay1;

Mitov::LiquidCrystalElementTextField<
    Mitov::LiquidCrystalDisplay<
      Mitov::LiquidCrystalDisplayParallel<
      Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<4 >, Mitov::DigitalPin_DirectBoardPinImplementation<5 >, Mitov::DigitalPin_DirectBoardPinImplementation<6 >, Mitov::DigitalPin_DirectBoardPinImplementation<7 >>, // 1_PINS
      Mitov::DigitalPin_DirectBoardPinImplementation<8 >, // 1_PINS_0
      Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
      Mitov::DigitalPin_DirectBoardPinImplementation<9 >, // 1_PINS_2
      Mitov::ConstantProperty<21, bool, false >, // AutoScroll
      Mitov::ConstantProperty<24, bool, false >, // Blink
      Mitov::ConstantProperty<20, bool, true >, // Enabled
      Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
      Mitov::ConstantProperty<22, bool, false >, // RightToLeft
      Mitov::ConstantProperty<23, bool, false > // ShowCursor
      >, // 0_TYPE
      16, // Columns
      Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable2>, // FCursorLine
      Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable1>, // FCursorPos
      2 // Rows
       >, // 0_TYPE_OWNER
    Declarations::_o_LiquidCrystalDisplay1, // 1_NAME_OWNER
    Mitov::ConstantProperty<5, bool, true >, // AllignLeft
    Mitov::ConstantProperty<7, uint32_t, 0 >, // Column
    Mitov::ConstantProperty<6, char, ' ' >, // FillCharacter
    Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue0 >, // InitialValue
    Mitov::ConstantProperty<8, uint32_t, 0 >, // Row
    Mitov::ConstantProperty<4, uint32_t, 16 > // Width
     > TArduinoLiquidCrystalElementTextField1;

Mitov::LiquidCrystalElementTextField<
    Mitov::LiquidCrystalDisplay<
      Mitov::LiquidCrystalDisplayParallel<
      Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<4 >, Mitov::DigitalPin_DirectBoardPinImplementation<5 >, Mitov::DigitalPin_DirectBoardPinImplementation<6 >, Mitov::DigitalPin_DirectBoardPinImplementation<7 >>, // 1_PINS
      Mitov::DigitalPin_DirectBoardPinImplementation<8 >, // 1_PINS_0
      Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
      Mitov::DigitalPin_DirectBoardPinImplementation<9 >, // 1_PINS_2
      Mitov::ConstantProperty<21, bool, false >, // AutoScroll
      Mitov::ConstantProperty<24, bool, false >, // Blink
      Mitov::ConstantProperty<20, bool, true >, // Enabled
      Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
      Mitov::ConstantProperty<22, bool, false >, // RightToLeft
      Mitov::ConstantProperty<23, bool, false > // ShowCursor
      >, // 0_TYPE
      16, // Columns
      Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable2>, // FCursorLine
      Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable1>, // FCursorPos
      2 // Rows
       >, // 0_TYPE_OWNER
    Declarations::_o_LiquidCrystalDisplay1, // 1_NAME_OWNER
    Mitov::ConstantProperty<5, bool, true >, // AllignLeft
    Mitov::ConstantProperty<7, uint32_t, 0 >, // Column
    Mitov::ConstantProperty<6, char, ' ' >, // FillCharacter
    Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue1 >, // InitialValue
    Mitov::ConstantProperty<8, uint32_t, 1 >, // Row
    Mitov::ConstantProperty<4, uint32_t, 16 > // Width
     > TArduinoLiquidCrystalElementTextField2;

Mitov::LiquidCrystalElementTextField_Clocked<
    Mitov::LiquidCrystalDisplay<
      Mitov::LiquidCrystalDisplayParallel<
      Mitov::LiquidCrystalDisplayParallel4DataPins<Mitov::DigitalPin_DirectBoardPinImplementation<4 >, Mitov::DigitalPin_DirectBoardPinImplementation<5 >, Mitov::DigitalPin_DirectBoardPinImplementation<6 >, Mitov::DigitalPin_DirectBoardPinImplementation<7 >>, // 1_PINS
      Mitov::DigitalPin_DirectBoardPinImplementation<8 >, // 1_PINS_0
      Mitov::DigitalPin_NoImplementation<1 >, // 1_PINS_1
      Mitov::DigitalPin_DirectBoardPinImplementation<9 >, // 1_PINS_2
      Mitov::ConstantProperty<21, bool, false >, // AutoScroll
      Mitov::ConstantProperty<24, bool, false >, // Blink
      Mitov::ConstantProperty<20, bool, true >, // Enabled
      Mitov::ConstantProperty<25, bool, false >, // Hight10Pixels
      Mitov::ConstantProperty<22, bool, false >, // RightToLeft
      Mitov::ConstantProperty<23, bool, false > // ShowCursor
      >, // 0_TYPE
      16, // Columns
      Mitov::TypedVariable<38, uint32_t, ::ComponentVariables::Variable2>, // FCursorLine
      Mitov::TypedVariable<32, uint32_t, ::ComponentVariables::Variable1>, // FCursorPos
      2 // Rows
       >, // 0_TYPE_OWNER
    Declarations::_o_LiquidCrystalDisplay1, // 1_NAME_OWNER
    Mitov::ConstantProperty<5, bool, true >, // AllignLeft
    Mitov::ConstantProperty<7, uint32_t, 7 >, // Column
    Mitov::ConstantProperty<6, char, ' ' >, // FillCharacter
    Mitov::ConstantPropertyString<3, ::VisuinoConstants::TextValue2 >, // InitialValue
    Mitov::ConstantProperty<8, uint32_t, 1 >, // Row
    Mitov::ConstantProperty<4, uint32_t, 16 > // Width
     > TArduinoLiquidCrystalElementTextField3;

Mitov::Snapshot<
  float, // 0_TYPE
  Mitov::ConstantProperty<3, bool, true >, // Enabled
  Mitov::AnalogPin_EmbeddedPinImplementation<4, ::PinCalls::PinCallerReceive1 > // OutputPin
   > _o_AnalogSnapshot1 = Mitov::Snapshot<
  float, // 0_TYPE
  Mitov::ConstantProperty<3, bool, true >, // Enabled
  Mitov::AnalogPin_EmbeddedPinImplementation<4, ::PinCalls::PinCallerReceive1 > // OutputPin
   >( 0.0f );

Mitov::PulseGeneratorSimple<
  Mitov::ConstantPropertyFloat<2, float, ::VisuinoConstants::FloatValue1 >, // Asymmetry
  Mitov::ConstantProperty<5, bool, true >, // Enabled
  Mitov::ConstantPropertyFloat<1, float, ::VisuinoConstants::FloatValue0 >, // Frequency
  Mitov::TypedVariableValue<4, bool, ::ComponentVariables::Variable3, false >, // InitialValue
  Mitov::DigitalPin_EmbeddedPinImplementation_ChangeOnly<6, ::PinCalls::PinCallerReceive2, Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable4 > >, // OutputPin
  Mitov::ConstantPropertyFloat<3, float, ::VisuinoConstants::FloatValue1 > // Phase
   > _o_PulseGenerator1;

} // Declarations

// Type Converters

namespace TypeConverters
{
Mitov::Convert_BinaryToClock<Mitov::TypedVariable<0, bool, ::ComponentVariables::Variable5 >> Converter0;
} // TypeConverters

// Pin Call Declarations

namespace PinCalls
{
void PinCallerConverterReceive1( void *_Data );
} // PinCalls

// Pin Call Implementations

namespace PinCalls
{
void PinCallerReceive0::Notify( void *_Data )
{
  Declarations::_o_AnalogSnapshot1.InputPin_o_Receive( _Data );
}

void PinCallerReceive1::Notify( void *_Data )
{
  Declarations::TArduinoLiquidCrystalElementTextField3.ClockInputPin_o_Receive( _Data );
}

void PinCallerReceive2::Notify( void *_Data )
{
  TypeConverters::Converter0.Convert( _Data, PinCallerConverterReceive1 );
}

void PinCallerConverterReceive1( void *_Data )
{
  Declarations::_o_AnalogSnapshot1.SnapshotInputPin_o_Receive( _Data );
}
} // PinCalls

namespace ComponentsHardware
{
void SystemUpdateHardware()
{
}
} // ComponentsHardware

//The setup function is called once at startup of the sketch
void setup()
{
  BoardDeclarations::ArduinoAnalogInputChannel_0.SystemInit();
  Declarations::_o_LiquidCrystalDisplay1.SystemInit();
  BoardDeclarations::ArduinoAnalogInputChannel_0.SystemStart();
  Declarations::TArduinoLiquidCrystalElementTextField1.SystemStart();
  Declarations::TArduinoLiquidCrystalElementTextField2.SystemStart();
  Declarations::_o_PulseGenerator1.SystemStart();

  OpenWire::SystemStarted();
}

// The loop function is called in an endless loop
void loop()
{
  BoardDeclarations::ArduinoAnalogInputChannel_0.SystemLoopBegin();
  Declarations::_o_PulseGenerator1.SystemLoopBegin();
}
